name: CDK Deploy on AWS

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        environment: Production
        permissions:
            contents: read
            id-token: write
        env:
            APP_NAME: ${{ vars.APP_NAME }}
            ACCOUNT_AWS: ${{ vars.ACCOUNT_AWS }}
            REGION_AWS: ${{ vars.REGION_AWS }}
            DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
            SUBDOMAIN_NAME: ${{ vars.SUBDOMAIN_NAME }}
            EC2_HOST: ${{ vars.EC2_HOST }}
            CERTBOT_EMAIL: ${{ vars.CERTBOT_EMAIL }}
                        
        steps:
            - name: Checkout Repositorio
              uses: actions/checkout@v4
      
            - name: Instalar .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ vars.VERSION_DOTNET }}
      
            - name: Instalar Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ vars.VERSION_NODEJS }}
                                                      
            - name: Instalar AWS CDK
              run: npm install -g aws-cdk
                                          
            - name: Publish .NET Application
              run: dotnet publish /p:PublishDir=../publish /p:PublishReadyToRun=true -r linux-arm64 --self-contained true 
              
            - name: Creación appsettings.json
              env:
                  APPSETTINGS: ${{ secrets.APPSETTINGS }}
              run: echo "$APPSETTINGS" > ./publish/appsettings.json
              
            - name: Copy files to EC2
              env:
                  EC2_HOST: ${{ vars.EC2_HOST }}
                  EC2_USERNAME: ${{ vars.EC2_USERNAME }}
                  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
                  WEBAPP_DIRECTORY: ${{ vars.WEBAPP_DIRECTORY }}
                  WEBAPP_SERVICE: ${{ vars.WEBAPP_SERVICE }}
                  WEBAPP_EXECSTART: ${{ vars.WEBAPP_EXECSTART }}
                  CLOUDFLARE_CLIENT_CRT: ${{ secrets.CLOUDFLARE_CLIENT_CRT }}
              run: |
                echo 'Se añade EC2 Host a Known Hosts'
                mkdir -p ~/.ssh
                ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
                
                echo 'Se crea archivo SSH Key de EC2'
                echo "$EC2_SSH_KEY" > ssh_key.pem
                chmod 600 ssh_key.pem
                
                echo 'Se crea archivo de CRT Cloudflare'
                echo "$CLOUDFLARE_CLIENT_CRT" > cloudflare.crt
                
                # En caso de que ya se haya desplegado alguna vez la aplicación, se detiene y se eliminan los archivos antiguos...
                ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "WEBAPP_SERVICE=$WEBAPP_SERVICE WEBAPP_DIRECTORY=$WEBAPP_DIRECTORY" '
                    echo 'Se detiene servicio web'
                    sudo systemctl stop $WEBAPP_SERVICE || true
                    echo 'Se eliminan archivos del servicio web'
                    rm -rf ~/$WEBAPP_DIRECTORY/*
                '
                
                # Se copian las piezas publicadas en directorio remoto de instancia EC2...
                echo 'Se copian archivos publicados en EC2'
                scp -i ssh_key.pem -r ./publish/* $EC2_USERNAME@$EC2_HOST:~/$WEBAPP_DIRECTORY
                
                # Se copia el archivo service...
                echo 'Se copia archivo .service en EC2'
                scp -i ssh_key.pem ./$WEBAPP_SERVICE.service $EC2_USERNAME@$EC2_HOST:~/$WEBAPP_DIRECTORY 
                
                # Se copia el archivo de nginx...
                # echo 'Se copia archivo .conf en EC2'
                # scp -i ssh_key.pem ./$WEBAPP_SERVICE.conf $EC2_USERNAME@$EC2_HOST:~/$WEBAPP_DIRECTORY 
                
                # Se copia archivo CRT de cloudflare...
                echo 'Se copia archivo cloudflare.crt en EC2'
                scp -i ssh_key.pem ./cloudflare.crt $EC2_USERNAME@$EC2_HOST:~/$WEBAPP_DIRECTORY 
                
                echo ''
                # Se inicializa el web service...
                ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "WEBAPP_SERVICE=$WEBAPP_SERVICE WEBAPP_DIRECTORY=$WEBAPP_DIRECTORY WEBAPP_EXECSTART=$WEBAPP_EXECSTART SUBDOMAIN_NAME=$SUBDOMAIN_NAME CERTBOT_EMAIL=$CERTBOT_EMAIL" '
                    echo 'Se mueve archivo cloudflare.crt'
                    sudo mkdir /etc/nginx/certs || true
                    sudo mv -f ~/$WEBAPP_DIRECTORY/cloudflare.crt /etc/nginx/certs/
                    
                    echo 'Se mueve archivo .service y se inicia servicio'
                    sudo mv -f ~/$WEBAPP_DIRECTORY/$WEBAPP_SERVICE.service /etc/systemd/system/
                    sudo chmod +x ~/$WEBAPP_DIRECTORY/$WEBAPP_EXECSTART
                    sudo systemctl daemon-reload
                    sudo systemctl enable $WEBAPP_SERVICE
                    sudo systemctl restart $WEBAPP_SERVICE
                    
                    # echo 'Se mueve archivo .conf y se reinicia nginx'
                    # sudo mv -f ~/$WEBAPP_DIRECTORY/$WEBAPP_SERVICE.conf /etc/nginx/conf.d/
                    # sudo systemctl reload nginx 
                    
                    # echo 'Se configura certificados con certbot'
                    # sudo certbot --nginx -d $SUBDOMAIN_NAME -m $CERTBOT_EMAIL --agree-tos --non-interactive
                    sudo systemctl reload nginx 
                '
                
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
              with:
                  aws-region: ${{ vars.REGION_AWS }}
                  role-to-assume: ${{ vars.ARN_GITHUB_ROLE }}
                
            - name: CDK Synth
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk synth
              
            - name: CDK Diff
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk --app cdk.out diff
              
            - name: CDK Deploy
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk --app cdk.out deploy --require-approval never